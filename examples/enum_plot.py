"""
Plotting the configurations generated by a walker in real time. 

Bases off Joe Kington's excellent example on SO: 
http://stackoverflow.com/questions/9401658/matplotlib-animating-a-scatter-plot
"""
import matplotlib.ticker
import matplotlib.pyplot as plt
import matplotlib.animation as animation

from mcba.models.impurity import Par, SingleImpurity, initial_q, k_F, gamma
from mcba.models.impurity.partitions import fermi_sea, a_partition
from mcba.walker import Walker
from mcba.enumerations import EnumWalker


class AnimatedScatter(object):
    """An animated plot using matplotlib.animations.FuncAnimation.
    Based off Joe Kington's answer on SO: 
    http://stackoverflow.com/questions/9401658/matplotlib-animating-a-scatter-plot
    """
    def __init__(self, walker, numpoints=50):
        self.walker = walker
      
        # Setup the figure and axes.
        self.fig, self.ax = plt.subplots()
        
        # Then setup FuncAnimation.
		# interval is hardcoded. Can it be changed programmatically? 
        self.ani = animation.FuncAnimation(self.fig, self.update, interval=300, 
                                           init_func=self.setup_plot ) #, blit=True)

        #TODO: w/ blit=True handle rescales properly (otherwise, scale jumps back)

    def setup_plot(self):
        """Initial drawing."""

        # header: parameters
        par = self.walker.model.par     
        title = r"$N = {0}$      $\gamma={1:.2f}$    $q/k_F = {2:.2f}$".format(
             par.N, gamma(par), initial_q(par)/k_F(par))        
        self.ax.text(0.1, 0.9, title, fontsize=18, transform=self.ax.transAxes)

        # footer: # of cnfs, sum_overlaps
        self.prntout = self.ax.text(0.1, 0.1, "",
                 transform=self.ax.transAxes, fontsize=18)

        # the fermi sea & fs_pairs
        fs = fermi_sea(self.walker.model.par.N)
        self.ax.plot(fs, [0]*len(fs), 'bo', ms=20, mec='b', alpha=0.3)
        
        h, p = self.walker.fs_pairs
        self.h, = self.ax.plot(h, [0]*len(h), 'wo', ms=20, mec='b', #mew=12,
                visible=False)
        self.p, = self.ax.plot(p, [0]*len(h), 'mo', ms=20, mec='m', alpha=0.7, 
                visible=False)

        # tweak the axes
        self.ax.set_xlim([1.5*min(fs), 1.5*max(fs)])
        self.ax.tick_params(axis="x", labelsize=20)
        for side in ["top", "right", "left"]:        
            self.ax.spines[side].set_color('none')
        self.ax.spines['bottom'].set_position('zero')
        self.ax.yaxis.set_major_locator(matplotlib.ticker.NullLocator())
        self.ax.xaxis.tick_bottom()

        return self.h, self.p, self.prntout


    def update(self, i):
        """Update the scatter plot."""
        next(self.walker.gen_walk())
        pairs = self.walker.fs_pairs
        if pairs.h:
            print("@ upd: ", pairs)
            self.h.set_data(pairs.h, [0]*len(pairs.h))
            self.p.set_data(pairs.p, [0]*len(pairs.p))
            self.h.set_visible(True)
            self.p.set_visible(True)

            xlim = self.ax.get_xlim()
            if max(pairs.p) > xlim[1]:
                self.ax.set_xlim(-max(pairs.p)*1.2, max(pairs.p)*1.2)
        self.prntout.set_text(self.walker_info())

        return self.h, self.p, self.prntout


    def walker_info(self):
        """Return the current number of cnfs and sum_overlaps."""
        return "{0}: {1} steps \n{2} unique cnfs, \nsum_overlaps = {3:.2f}".format(
                self.walker.name, 
                self.walker.sweeps*self.walker.steps_per_sweep + self.walker.step,
                self.walker.num_cnf(), 
                self.walker.sum_overlaps())

    def show(self):
        plt.show()


###########################################
if __name__ == '__main__':
    par = Par(N=15, L=15*3, m_q = 10)
    model = SingleImpurity(par)
    
    # Setting steps_per_sweeps=1 is not really suitable for in production
    # here it's only for a demo purposes. Same for keep_rcache=True 
    walker = Walker(model, steps_per_sweep=1, reset_freq=None, keep_rcache=True, seed=101)

    # Enumerations work just as well
    walker = EnumWalker(model, steps_per_sweep=1, keep_rcache=True)

    a = AnimatedScatter(walker)
    a.show()

